#!/usr/bin/env node

/**
 * Script de inicializa√ß√£o do MCP-Booster
 * Suporta tanto o servidor MCP quanto o comando de instala√ß√£o
 * Compat√≠vel com Windows, macOS e Linux
 */

const path = require('path');
const fs = require('fs');

// Fun√ß√£o para normalizar paths cross-platform
function resolvePath(relativePath) {
    return path.resolve(__dirname, relativePath);
}

// Fun√ß√£o para mostrar ajuda geral
function showGeneralHelp() {
    console.log(`
üöÄ MCP-Booster - Servidor MCP com CoConuT (Continuous Chain of Thought)

COMANDOS DISPON√çVEIS:

  mcp-booster                    Inicia o servidor MCP (modo padr√£o)
  mcp-booster init [op√ß√µes]      Instala configura√ß√£o MCP no Cursor IDE
  mcp-booster --help             Mostra esta ajuda

EXEMPLOS:

  # Iniciar servidor MCP
  mcp-booster

  # Instalar no Cursor IDE
  mcp-booster init --ide cursor --api-key sua-api-key

  # Ajuda espec√≠fica do comando init
  mcp-booster init --help

Para mais informa√ß√µes sobre um comando espec√≠fico, use --help ap√≥s o comando.
`);
}

// Verificar argumentos da linha de comando
const args = process.argv.slice(2);

// Se primeiro argumento √© 'init', executar comando de instala√ß√£o
if (args.length > 0 && args[0] === 'init') {
    // Verificar se o m√≥dulo de init existe
    const initModulePath = resolvePath('../dist/modules/init/init-command.js');

    if (!fs.existsSync(initModulePath)) {
        console.error('‚ùå Erro: M√≥dulo de instala√ß√£o n√£o encontrado.');
        console.error('üìç Esperado em:', initModulePath);
        console.error('üí° Execute "npm run build" no diret√≥rio do projeto para compilar.');
        process.exit(1);
    }

    try {
        // Importar e executar comando init
        const { runInitCommand } = require(initModulePath);

        if (typeof runInitCommand !== 'function') {
            console.error('‚ùå Erro: Fun√ß√£o runInitCommand n√£o encontrada.');
            process.exit(1);
        }

        // Executar comando init
        runInitCommand(process.argv);

    } catch (error) {
        console.error('‚ùå Erro ao executar comando init:');
        console.error('üìù Detalhes:', error.message);

        if (error.code === 'MODULE_NOT_FOUND') {
            console.error('üí° Solu√ß√£o: Execute "npm run build" para compilar os m√≥dulos.');
        }

        process.exit(1);
    }

} else if (args.length > 0 && (args[0] === '--help' || args[0] === '-h')) {
    // Mostrar ajuda geral
    showGeneralHelp();

} else {
    // Modo padr√£o: iniciar servidor MCP

    // Verificar se o arquivo principal existe
    const mainFile = resolvePath('../dist/index.js');
    if (!fs.existsSync(mainFile)) {
        console.error('‚ùå Erro: Arquivo principal n√£o encontrado.');
        console.error('üìç Esperado em:', mainFile);
        console.error('üí° Execute "npm run build" no diret√≥rio do projeto para compilar.');
        process.exit(1);
    }

    try {
        // Importar e inicializar o servidor
        const { initializeServer } = require(mainFile);

        // Verificar se a fun√ß√£o est√° dispon√≠vel
        if (typeof initializeServer !== 'function') {
            console.error('‚ùå Erro: Fun√ß√£o initializeServer n√£o encontrada no m√≥dulo principal.');
            process.exit(1);
        }

        // Inicializar o servidor com configura√ß√µes padr√£o
        initializeServer();

    } catch (error) {
        console.error('‚ùå Erro ao inicializar o servidor MCP-Booster:');
        console.error('üìù Detalhes:', error.message);

        // Mensagens espec√≠ficas por tipo de erro
        if (error.code === 'MODULE_NOT_FOUND') {
            console.error('üí° Solu√ß√£o: Verifique se todas as depend√™ncias est√£o instaladas.');
            console.error('   Execute: npm install');
        } else if (error.code === 'ENOENT') {
            console.error('üí° Solu√ß√£o: Verifique se o arquivo existe e as permiss√µes est√£o corretas.');
        }

        process.exit(1);
    }
} 